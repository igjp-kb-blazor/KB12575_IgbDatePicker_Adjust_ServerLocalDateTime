@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div style="max-width:300px; margin:24px auto; display:flex; flex-direction:column; gap:24px">

    <IgbDatePicker Value="_value" ValueChanged="OnValueChanged" />

    <div>
        value: @($"{_value} (kind: {_value.Kind})")
    </div>

</div>

@code
{
    private DateTime _value = DateTime.Today;

    private IJSObjectReference? _module;

    private async ValueTask<IJSObjectReference> GetModuleAsync()
    {
        return _module ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./time-zone.js");
    }

    private async Task OnValueChanged(DateTime value)
    {
        // ブラウザのタイムゾーンオフセット (分) を取得
        var module = await GetModuleAsync();
        var timezoneOffset = await module.InvokeAsync<int>("getTimezoneOffset");

        // IgbDatePicker から送られてきた値 (このサーバー上でのローカル時刻) を、ブラウザ上のローカル時刻に復元
        var browserLocalTime = value.ToUniversalTime().AddMinutes(-timezoneOffset);

        // その上で、年・月・日だけを取り出して、サーバー上での 0:00AM のローカル時刻に変換
        _value = new DateTime(browserLocalTime.Year, browserLocalTime.Month, browserLocalTime.Day, 0, 0, 0, DateTimeKind.Local);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try { await _module.DisposeAsync(); } catch (JSDisconnectedException) { }
        }
    }
}